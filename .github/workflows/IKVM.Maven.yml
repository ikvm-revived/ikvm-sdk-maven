name: IKVM.Maven

on:
  push:
    branches:
    - main
    - develop
  pull_request:
    branches:
    - main
    - develop

jobs:
  build:
    name: Build
    runs-on: windows-2022
    steps:
    - name: Checkout Source
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: recursive
    - name: Move Temporary Directory
      shell: pwsh
      run: Add-Content $env:GITHUB_ENV "`nTMP=${{ runner.temp }}`nTEMP=${{ runner.temp }}`nTMPDIR=${{ runner.temp }}"
    - name: Setup .NET
      shell: pwsh
      run: Add-Content $env:GITHUB_ENV "`nDOTNET_INSTALL_DIR=${{ runner.temp }}\dotnet"
    - name: Setup .NET 3.1
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 3.1.x
    - name: Setup .NET 6.0
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.13
      with:
        versionSpec: 5.x
    - name: Execute GitVersion
      uses: gittools/actions/gitversion/execute@v0.9.13
      with:
        useConfigFile: true
    - name: Move NuGet Directory
      shell: pwsh
      run: Add-Content $env:GITHUB_ENV "`nNUGET_PACKAGES=${{ runner.temp }}\nuget\packages"
    - name: Add NuGet Source (GitHub)
      shell: pwsh
      run: dotnet nuget add source --username USERNAME --password $env:GITHUB_TOKEN --store-password-in-clear-text --name ikvm $env:GITHUB_REPOS
      env:
        GITHUB_REPOS: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Cache NuGet
      uses: actions/cache@v3
      with:
        path: ${{ runner.temp }}\nuget\packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**\*.csproj', '**\*.msbuildproj') }}-1
        restore-keys: ${{ runner.os }}-nuget-
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.1
    - name: NuGet Restore
      run: dotnet restore IKVM.Maven.sln
    - name: Build Artifacts
      run: |
        msbuild /m:1 `
          /p:Configuration="Release" `
          /p:Platform="Any CPU" `
          /p:Version=${env:GitVersion_FullSemVer} `
          /p:AssemblyVersion=${env:GitVersion_AssemblySemVer} `
          /p:InformationalVersion=${env:GitVersion_InformationalVersion} `
          /p:FileVersion=${env:GitVersion_AssemblySemFileVer} `
          /p:PackageVersion=${env:GitVersion_NuGetVersionV2} `
          /p:RepositoryUrl="${env:GITHUB_SERVER_URL}/${env:GITHUB_REPOSITORY}.git" `
          /p:PackageProjectUrl="${env:GITHUB_SERVER_URL}/${env:GITHUB_REPOSITORY}" `
          /p:BuildInParallel=true `
          /p:CreateHardLinksForAdditionalFilesIfPossible=true `
          /p:CreateHardLinksForCopyAdditionalFilesIfPossible=true `
          /p:CreateHardLinksForCopyFilesToOutputDirectoryIfPossible=true `
          /p:CreateHardLinksForCopyLocalIfPossible=true `
          /p:CreateHardLinksForPublishFilesIfPossible=true `
          /p:ContinuousIntegrationBuild=true `
          IKVM.Maven.artifacts.msbuildproj
    - name: Upload MSBuild Log
      if: ${{ always() }}
      uses: actions/upload-artifact@v3
      with:
        name: msbuild.binlog
        path: msbuild.binlog
    - name: Upload NuGet Packages
      uses: actions/upload-artifact@v3
      with:
        name: nuget
        path: build/nuget
    - name: Package Tests
      run: tar czvf tests.tar.gz tests
      working-directory: build
    - name: Upload Tests
      uses: actions/upload-artifact@v3
      with:
        name: tests
        path: build/tests.tar.gz
  test:
    strategy:
      matrix:
        sys:
        - windows
        - linux
    name: Test (${{ matrix.sys }})
    needs:
    - build
    runs-on: ${{ fromJSON('{"windows":["windows-2022"],"linux":["ubuntu-22.04"]}')[matrix.sys] }}
    steps:
    - name: Setup .NET
      shell: pwsh
      run: Add-Content $env:GITHUB_ENV "`nDOTNET_INSTALL_DIR=${{ runner.temp }}/dotnet"
    - name: Setup .NET 3.1
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 3.1.x
    - name: Setup .NET 5.0
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 5.0.x
    - name: Setup .NET 6.0
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x
    - name: Setup NuGet
      shell: pwsh
      run: Add-Content $env:GITHUB_ENV "`nNUGET_PACKAGES=${{ runner.temp }}\nuget\packages"
    - name: Add NuGet Source (GitHub)
      shell: pwsh
      run: dotnet nuget add source --username USERNAME --password $env:GITHUB_TOKEN --store-password-in-clear-text --name ikvm $env:GITHUB_REPOS
      env:
        GITHUB_REPOS: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Download Tests
      uses: actions/download-artifact@v3
      with:
        name: tests
        path: build
    - name: Restore Tests
      run: tar xzvf tests.tar.gz
      working-directory: build
    - name: Execute Tests
      shell: pwsh
      run: gci .\build\tests\ -Recurse -Filter '*.Tests.dll' | group { $_.Directory.BaseName } | %{ dotnet test $_.Group --blame -v 3 --results-directory .\TestResults --logger "trx;LogFileName=$($_.Name).trx" }
    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: TestResults-${{ matrix.sys }}
        path: TestResults
  release:
    name: Release
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    needs:
    - test
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout Source
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.13
      with:
        versionSpec: 5.x
    - name: Execute GitVersion
      id: GitVersion
      uses: gittools/actions/gitversion/execute@v0.9.13
      with:
        useConfigFile: true
    - name: Download NuGet Packages
      uses: actions/download-artifact@v3
      with:
        name: nuget
        path: build/nuget
    - name: Create Release
      if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' || github.event.head_commit.message == '+prerelease'
      uses: ncipollo/release-action@v1.10.0
      with:
        tag: ${{ steps.GitVersion.outputs.semVer }}
        artifacts: build/nuget/*.nupkg,build/nuget/*.snupkg
        draft: false
        generateReleaseNotes: true
        prerelease: ${{ github.ref == 'refs/heads/develop' }}
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Push NuGet (GitHub)
      shell: pwsh
      run: dotnet nuget push build/nuget/*.nupkg --source $env:GITHUB_REPOS --api-key $env:GITHUB_TOKEN --skip-duplicate
      env:
        GITHUB_REPOS: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Push NuGet (Azure DevOps)
      shell: pwsh
      run: |
        dotnet nuget add source $env:AZUREDEVOPS_REPOS --name az --username az --password $env:AZUREDEVOPS_TOKEN --store-password-in-clear-text
        dotnet nuget push build/nuget/*.nupkg --source az --api-key az --skip-duplicate
      env:
        AZUREDEVOPS_REPOS: https://pkgs.dev.azure.com/ikvm-revived/ikvm/_packaging/ikvm-ci/nuget/v3/index.json
        AZUREDEVOPS_TOKEN: ${{ secrets.AZUREDEVOPS_PAT }}
    - name: Push NuGet
      if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' || github.event.head_commit.message == '+prerelease'
      shell: pwsh
      run: dotnet nuget push build/nuget/*.nupkg --source $env:NUGET_REPOS --api-key $env:NUGET_TOKEN --skip-duplicate
      env:
        NUGET_REPOS: https://api.nuget.org/v3/index.json
        NUGET_TOKEN: ${{ secrets.NUGET_TOKEN }}
