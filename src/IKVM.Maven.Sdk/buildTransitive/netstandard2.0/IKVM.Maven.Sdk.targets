<Project>
    <PropertyGroup>
        <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
    </PropertyGroup>

    <!-- Transforms the MavenReference item group into MavenReferenceItem items. -->
    <Target Name="GetMavenReferenceItemsFromPackageReferences" DependsOnTargets="ResolvePackageAssets">
        <MavenReferenceItemImport AssetsFilePath="$(ProjectAssetsFile)" TargetFramework="$(TargetFramework)" RuntimeIdentifier="$(RuntimeIdentifier)" Condition="Exists('$(ProjectAssetsFile)')">
            <Output TaskParameter="Items" ItemName="_MavenReferenceItemFromPackageReferences" />
        </MavenReferenceItemImport>
        <ItemGroup>
            <MavenReferenceItem Include="@(_MavenReferenceItemFromPackageReferences)">
                <ReferenceSource>PackageReference</ReferenceSource>
            </MavenReferenceItem>
        </ItemGroup>
    </Target>

    <!-- Obtains MavenReferenceItem items from child projects. -->
    <Target Name="GetMavenReferenceItemsFromProjectReferences" DependsOnTargets="PrepareProjectReferences">
        <MSBuild
            Projects="@(_MSBuildProjectReferenceExistent)"
            Targets="GetMavenReferenceItems"
            SkipNonexistentTargets="true"
            BuildInParallel="$(BuildInParallel)"
            Properties="%(_MSBuildProjectReferenceExistent.SetConfiguration);%(_MSBuildProjectReferenceExistent.SetPlatform);%(_MSBuildProjectReferenceExistent.SetTargetFramework)"
            Condition=" '%(_MSBuildProjectReferenceExistent.BuildReference)' == 'true' And '@(ProjectReferenceWithConfiguration)' != '' And '@(_MSBuildProjectReferenceExistent)' != '' "
            ContinueOnError="$(ContinueOnError)"
            RemoveProperties="%(_MSBuildProjectReferenceExistent.GlobalPropertiesToRemove);$(_GlobalPropertiesToRemoveFromProjectReferences)">
            <Output TaskParameter="TargetOutputs" ItemName="_MavenReferenceItemFromProjectReferences" />
        </MSBuild>
        <ItemGroup>
            <MavenReferenceItem Include="@(_MavenReferenceItemFromProjectReferences)">
                <OriginalReferenceSource>%(_MavenReferenceItemFromProjectReferences.ReferenceSource)</OriginalReferenceSource>
                <ReferenceSource>ProjectReference</ReferenceSource>
            </MavenReferenceItem>
        </ItemGroup>
    </Target>

    <!-- Transforms the MavenReference item group into MavenReferenceItem items. -->
    <Target Name="GetMavenReferenceItemsFromMavenReferences" Condition=" '@(MavenReference)' != '' ">
        <ItemGroup>
            <MavenReferenceItem Include="@(MavenReference)">
                <ReferenceSource>MavenReference</ReferenceSource>
            </MavenReferenceItem>
        </ItemGroup>
    </Target>

    <!-- Populates the MavenReferenceItem set with required metadata. -->
    <Target Name="GetMavenReferenceItemsMetadata" DependsOnTargets="GetMavenReferenceItemsFromPackageReferences;GetMavenReferenceItemsFromProjectReferences;GetMavenReferenceItemsFromMavenReferences;" Condition=" '@(MavenReferenceItem)' != '' ">
        <!-- Probes for default metadata from the reference item. -->
        <MavenReferenceItemPrepare Items="@(MavenReferenceItem)">
            <Output TaskParameter="Items" ItemName="_MavenReferenceItemWithMetadata" />
        </MavenReferenceItemPrepare>

        <!-- Assign newly discovered items. -->
        <ItemGroup>
            <MavenReferenceItem Remove="@(MavenReferenceItem)"/>
            <MavenReferenceItem Include="@(_MavenReferenceItemWithMetadata)" />
        </ItemGroup>
    </Target>

    <!-- PackageReferences come first, ProjectReferences come second, local MavenReferences come last. -->
    <PropertyGroup>
        <GetMavenReferenceItemsDependsOn>
            $(GetMavenReferenceItemsDependsOn);
            GetMavenReferenceItemsFromPackageReferences;
            PrepareProjectReferences;
            GetMavenReferenceItemsFromProjectReferences;
            GetMavenReferenceItemsFromMavenReferences;
            GetMavenReferenceItemsMetadata;
        </GetMavenReferenceItemsDependsOn>
    </PropertyGroup>

    <!-- Assembles the set of IkvmReferenceItems from various sources. -->
    <Target Name="GetMavenReferenceItems" DependsOnTargets="$(GetMavenReferenceItemsDependsOn)" Returns="@(MavenReferenceItem)">

    </Target>

    <PropertyGroup>
        <MavenDefaultRepositories Condition=" '$(MavenDefaultRepositories)' == '' ">central=https://repo1.maven.org/maven2/</MavenDefaultRepositories>
        <MavenAdditionalRepositories Condition=" '$(MavenAdditionalRepositories)' == '' "></MavenAdditionalRepositories>
        <MavenRepositories Condition=" '$(MavenRepositories)' == '' ">$(MavenDefaultRepositories);$(MavenAdditionalRepositories)</MavenRepositories>
        <MavenIncludeTestScope Condition=" '$(MavenIncludeTestScope)' == '' ">$(IsTestProject)</MavenIncludeTestScope>
        <MavenClassLoader Condition=" '$(MavenClassLoader)' == '' ">ikvm.runtime.AppDomainAssemblyClassLoader</MavenClassLoader>
        <MavenCacheFile Condition=" '$(MavenCacheFile)' == '' ">$(IntermediateOutputPath)$(ProjectName).maven.cache</MavenCacheFile>
    </PropertyGroup>

    <ItemGroup>
        <_MavenRepositories1 Include="$(MavenRepositories.Split(';'))" />
        <_MavenRepositories2 Include="@(_MavenRepositories1)" Id="$([System.String]::Copy('%(Identity)').Split('=')[0])" Url="$([System.String]::Copy('%(Identity)').Split('=')[1])" />
        <MavenRepositories Include="@(_MavenRepositories2->'%(Id)')" />
    </ItemGroup>

    <!-- Transfers the MavenReferenceItem set into the collection of IkvmReferenceItem. -->
    <Target Name="_GetMavenIkvmReferenceItems" DependsOnTargets="GetMavenReferenceItems" Condition=" '@(MavenReferenceItem)' != '' ">
        <MavenReferenceItemResolve CacheFile="$(MavenCacheFile)" Repositories="@(MavenRepositories)" IncludeTestScope="$(MavenIncludeTestScope)" KeyFile="$(IkvmKeyFile)" Debug="$(DebugSymbols)" ClassLoader="$(MavenClassLoader)" References="@(MavenReferenceItem)">
            <Output TaskParameter="ResolvedReferences" ItemName="_MavenIkvmReferenceItem"/>
        </MavenReferenceItemResolve>
        <ItemGroup>
            <IkvmReferenceItem Include="@(_MavenIkvmReferenceItem)">
                <ReferenceSource>MavenReference</ReferenceSource>
            </IkvmReferenceItem>
        </ItemGroup>
        <ItemGroup>
            <FileWrites Include="$(MavenCacheFile)" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <GetMavenIkvmReferenceItemsDependsOn>
            $(GetMavenIkvmReferenceItemsDependsOn);
            GetMavenReferenceItems;
            _GetMavenIkvmReferenceItems;
        </GetMavenIkvmReferenceItemsDependsOn>
    </PropertyGroup>

    <!-- Resolves the MavenReferenceItem set into the collection of IkvmReferenceItem. -->
    <Target Name="GetMavenIkvmReferenceItems" DependsOnTargets="$(GetMavenIkvmReferenceItemsDependsOn)">

    </Target>

    <!-- Attach our target before GetIkvmReferenceItems. -->
    <PropertyGroup>
        <GetIkvmReferenceItemsDependsOn>
            GetMavenIkvmReferenceItems;
            $(GetIkvmReferenceItemsDependsOn);
        </GetIkvmReferenceItemsDependsOn>
    </PropertyGroup>

    <!-- Gets the MavenReferenceItems that will be emitted to the generated package. -->
    <Target Name="GetMavenReferenceItemsForProjectModel" DependsOnTargets="GetMavenReferenceItems" Condition=" '@(MavenReferenceItem)' != '' ">
        <ItemGroup>
            <MavenReferenceItemsForProjectModel Include="@(MavenReferenceItem->WithMetadataValue('ReferenceSource', 'MavenReference'))" />
        </ItemGroup>
    </Target>

    <!-- Default Maven packaging variables. -->
    <PropertyGroup>
        <MavenProjectGroupdId Condition=" '$(MavenProjectGroupdId)' == '' ">ikvm.nuget</MavenProjectGroupdId>
        <MavenProjectArtifactId Condition=" '$(MavenProjectArtifactId)' == '' ">$(PackageId)</MavenProjectArtifactId>
        <MavenProjectArtifactId Condition=" '$(MavenProjectArtifactId)' == '' ">$(AssemblyName)</MavenProjectArtifactId>
        <MavenProjectArtifactId Condition=" '$(MavenProjectArtifactId)' == '' ">$(ProjectName)</MavenProjectArtifactId>
        <MavenProjectVersion Condition=" '$(MavenProjectVersion)' == '' ">$(PackageVersion)</MavenProjectVersion>
        <MavenProjectVersion Condition=" '$(MavenProjectVersion)' == '' ">$(Version)</MavenProjectVersion>
        <MavenProjectVersion Condition=" '$(MavenProjectVersion)' == '' ">$(AssemblyVersion)</MavenProjectVersion>
        <MavenProjectVersion Condition=" '$(MavenProjectVersion)' == '' ">0</MavenProjectVersion>
    </PropertyGroup>

    <!-- Outputs the project model file to the intermediate directory. -->
    <Target Name="_BuildMavenProjectModelPackageFile" DependsOnTargets="GetMavenReferenceItems;GetMavenReferenceItemsForProjectModel" Condition=" '@(MavenReferenceItemsForProjectModel)' != '' ">
        <MavenWriteProjectObjectModelFile GroupId="$(MavenProjectGroupdId)" ArtifactId="$(MavenProjectArtifactId)" Version="$(MavenProjectVersion)" References="@(MavenReferenceItemsForProjectModel)" ProjectFile="$(IntermediateOutputPath)$(PackageId).pom">

        </MavenWriteProjectObjectModelFile>
    </Target>

    <PropertyGroup>
        <BuildMavenProjectModelPackageFileDependsOn>
            $(BuildMavenProjectModelPackageFileDependsOn);
            GetMavenReferenceItems;
            GetMavenReferenceItemsForProjectModel;
            _BuildMavenProjectModelPackageFile;
        </BuildMavenProjectModelPackageFileDependsOn>
    </PropertyGroup>

    <!-- Outputs the project model file to the intermediate directory. -->
    <Target Name="BuildMavenProjectModelPackageFile" DependsOnTargets="$(BuildMavenProjectModelPackageFileDependsOn)">

    </Target>

    <Target Name="GetMavenProjectModelPackageFile" DependsOnTargets="BuildMavenProjectModelPackageFile">
        <ItemGroup>
            <TfmSpecificPackageFile Include="$(IntermediateOutputPath)$(PackageId).pom" PackagePath="maven\$(TargetFramework)" Condition="Exists('$(IntermediateOutputPath)$(PackageId).pom')" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <TargetsForTfmSpecificContentInPackage>$(TargetsForTfmSpecificContentInPackage);GetMavenProjectModelPackageFile</TargetsForTfmSpecificContentInPackage>
    </PropertyGroup>

    <Target Name="CleanMaven">
        <Delete Files="$(MavenCacheFile)" />
        <Delete Files="$(IntermediateOutputPath)$(PackageId).pom" />
    </Target>

    <PropertyGroup>
        <CleanDependsOn>
            $(CleanDependsOn);
            CleanMaven;
        </CleanDependsOn>
    </PropertyGroup>

</Project>
